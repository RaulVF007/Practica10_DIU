/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingWorker;

/**
 *
 * @author raulv
 */
public class FilesCompressor extends javax.swing.JFrame {
    
    DefaultListModel filesModel = new DefaultListModel();
    
    JFileChooser fileChooser = new JFileChooser();
    
    List<String> filesLocation = new ArrayList<>();    
    List<String> fileNames = new ArrayList<>();
    List<File> filesList = new ArrayList<>();
    
    JDialog dialog;

    private class Zip extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {
            try {
                // Objeto para referenciar a los archivos que queremos comprimir
                BufferedInputStream origin = null;
                // Objeto para referenciar el archivo zip de salida
                FileOutputStream dest = new FileOutputStream(fileChooser.getSelectedFile() + ".zip");
                ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(dest));
                int BUFFER_SIZE = 256;
                // Buffer de transferencia para almacenar datos a comprimir
                byte[] data = new byte[BUFFER_SIZE];

                Iterator i = filesLocation.iterator();
                double j = 1;
                while (i.hasNext()) {
                    String filename = (String) i.next();
                    FileInputStream fi = new FileInputStream(filename);
                    origin = new BufferedInputStream(fi, BUFFER_SIZE);
                    ZipEntry entry = new ZipEntry(fileNames.get((int) j));
                    out.putNextEntry(entry);
                    // Leemos datos desde el archivo origen y se env√≠an al archivo destino
                    int count;
                    while ((count = origin.read(data, 0, BUFFER_SIZE)) != -1) {
                        out.write(data, 0, count);
                    }
                    double a = (j / (double) filesLocation.size()) * 100;
                    barraProgreso.setValue((int) a);
                    j++;
                    Thread.sleep(500);
                    // Cerramos el archivo origen, ya enviado a comprimir
                    origin.close();
                }
                // Cerramos el archivo zip
                out.close();
            } catch (InterruptedException e) {
                JOptionPane.showMessageDialog(rootPane, "Zip cancelled", "Zip cancelled", JOptionPane.ERROR_MESSAGE);
            } catch (IOException e) {
            }
            return null;
        }
        
        @Override
        protected void done() {
            filesLocation.clear();
            fileNames.clear();
            dialog.dispose();
        }
    }
        
    public FilesCompressor() {
        initComponents();
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setDialogTitle("Choose where you want to save your zip file");
        
        barraProgreso.setStringPainted(true);
        
        fileList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        fileList.setModel(filesModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList<>();
        zipFileButton = new javax.swing.JButton();
        barraProgreso = new javax.swing.JProgressBar();
        clearFilesButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        selectFolderMenu = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutTheApp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Files Compressor");

        fileList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(fileList);

        zipFileButton.setText("Zip files");
        zipFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zipFileButtonActionPerformed(evt);
            }
        });

        clearFilesButton.setText("Clear");
        clearFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFilesButtonActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        selectFolderMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_DOWN_MASK));
        selectFolderMenu.setText("Select folder");
        selectFolderMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFolderMenuActionPerformed(evt);
            }
        });
        fileMenu.add(selectFolderMenu);

        jMenuBar1.add(fileMenu);

        helpMenu.setText("Help");

        aboutTheApp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_DOWN_MASK));
        aboutTheApp.setText("About the app");
        aboutTheApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutTheAppActionPerformed(evt);
            }
        });
        helpMenu.add(aboutTheApp);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(273, 273, 273)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(clearFilesButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(zipFileButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1)
                                .addGap(11, 11, 11)))))
                .addGap(243, 243, 243))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(242, 242, 242)
                .addComponent(barraProgreso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(208, 208, 208))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(42, 42, 42)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zipFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearFilesButton))
                .addGap(28, 28, 28)
                .addComponent(barraProgreso, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                .addGap(76, 76, 76))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void zipFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zipFileButtonActionPerformed
        int[] indices = fileList.getSelectedIndices();
        if (indices.length > 0) {
            int op = fileChooser.showSaveDialog(this);
            if (op == JFileChooser.APPROVE_OPTION) {
                Zip zip = new Zip();
                for (int indice : indices) {
                    filesLocation.add(filesList.get(indice).getAbsolutePath());
                    fileNames.add(filesList.get(indice).getName());
                }
                zip.execute();
                dialog = new JDialog();
                dialog.setLocation(320, 500);
                JButton cancelBtn = new JButton("Stop zipping files");
                cancelBtn.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        zip.cancel(true);
                    }
                });
                dialog.add(cancelBtn);
                dialog.setSize(150, 80);
                dialog.setVisible(true);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "First, you should select the file/s you want to zip", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_zipFileButtonActionPerformed

    private void aboutTheAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutTheAppActionPerformed
        String text="1.- Select the folder with the files you want to zip through "
        + "the 'File' menu -> 'Select folder'\n2.- After that, you will see"
        + "all the files from the folder in the JListArea. So, select the files you "
        + "want to zip individually with Ctrl + Right click\n3.- Finally, press the button 'Zip files'"
        + "and simultaneosly, you will see the progress in the progress bar.\nTake into account "
                + "you can stop this process with the button 'Stop zipping files'";

        JOptionPane.showMessageDialog(rootPane, text, "About the app", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutTheAppActionPerformed

    private void selectFolderMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFolderMenuActionPerformed
        int op = fileChooser.showOpenDialog(null);
        if (op == JFileChooser.APPROVE_OPTION) {
            File fichero = fileChooser.getSelectedFile();
            filesList = new ArrayList<>(Arrays.asList(fichero.listFiles()));
            for (File file : filesList) {
                fileNames.add(file.getName());
            }
            filesModel.addAll(fileNames);
        }
    }//GEN-LAST:event_selectFolderMenuActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int res = JOptionPane.showConfirmDialog(rootPane, "Do you want to exit the app?", "Exit", JOptionPane.YES_NO_OPTION);
        if(res == JOptionPane.YES_OPTION){
            System.exit(0);
        }else{

        }
    }//GEN-LAST:event_formWindowClosing

    private void clearFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFilesButtonActionPerformed
        clear();
    }//GEN-LAST:event_clearFilesButtonActionPerformed

    private void clear() {
        fileList.removeAll();
        filesModel.removeAllElements();
        filesList.clear();
        filesLocation.clear();
        fileNames.clear();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FilesCompressor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FilesCompressor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FilesCompressor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FilesCompressor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FilesCompressor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutTheApp;
    private javax.swing.JProgressBar barraProgreso;
    private javax.swing.JButton clearFilesButton;
    private javax.swing.JList<String> fileList;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem selectFolderMenu;
    private javax.swing.JButton zipFileButton;
    // End of variables declaration//GEN-END:variables

    }
